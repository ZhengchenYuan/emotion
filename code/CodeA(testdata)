import pandas as pd
from transformers import BertTokenizer, BertModel
import torch
from torch import nn, optim
from torch.utils.data import DataLoader, Dataset
import numpy as np

# 设备检测
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 自定义 Dataset 类
class EmotionDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, item):
        text = self.texts[item]
        label = self.labels[item]

        encoding = self.tokenizer(
            text,
            max_length=self.max_len,
            padding='max_length',
            truncation=True,
            return_tensors="pt"
        )

        return {
            'text': text,
            'input_ids': encoding['input_ids'].squeeze(0),
            'attention_mask': encoding['attention_mask'].squeeze(0),
            'labels': torch.tensor(label, dtype=torch.float)
        }

# 定义模型
class EmotionClassifier(nn.Module):
    def __init__(self, n_classes):
        super(EmotionClassifier, self).__init__()
        self.bert = BertModel.from_pretrained('bert-base-uncased')
        self.dropout = nn.Dropout(0.3)
        self.out = nn.Linear(self.bert.config.hidden_size, n_classes)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(
            input_ids=input_ids,
            attention_mask=attention_mask
        )
        output = self.dropout(outputs.pooler_output)
        return self.out(output)

# 读取数据
train_data = pd.read_csv(r"C:\Users\Xinyi Huang\Desktop\NLP\public_data_test\track_b\train\eng.csv")  # 训练数据（有 gold labels）
dev_data = pd.read_csv(r"C:\Users\Xinyi Huang\Desktop\NLP\public_data_test\track_b\dev\eng.csv")      # 开发数据（无 gold labels）
test_data = pd.read_csv(r"C:\Users\Xinyi Huang\Desktop\NLP\public_data_test\track_b\test\eng.csv") 

# 需要预测的情感类别
target_emotions = ['anger', 'fear', 'joy', 'sadness', 'surprise']

# Tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
MAX_LEN = 128

# 训练集
train_texts = train_data['text'].tolist()
train_labels = train_data[target_emotions].values  # (2768, 5)
train_dataset = EmotionDataset(train_texts, train_labels, tokenizer, MAX_LEN)
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)

# 评估集
dev_texts = dev_data['text'].tolist()
dev_dataset = EmotionDataset(dev_texts, np.zeros((len(dev_texts), 5)), tokenizer, MAX_LEN)
dev_loader = DataLoader(dev_dataset, batch_size=16)

# 测试集
test_texts = test_data['text'].tolist()
test_dataset = EmotionDataset(test_texts, np.zeros((len(test_texts), 5)), tokenizer, MAX_LEN)
test_loader = DataLoader(test_dataset, batch_size=16)

# 初始化模型
model = EmotionClassifier(n_classes=5).to(device)
optimizer = optim.Adam(model.parameters(), lr=2e-5)
criterion = nn.BCEWithLogitsLoss()

# 训练模型
for epoch in range(3):
    model.train()
    for batch in train_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)  # Use the correct batch labels

        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

# 预测函数
def predict(loader, model, threshold=0.5):
    model.eval()
    all_predictions = []

    with torch.no_grad():
        for batch in loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)

            outputs = model(input_ids, attention_mask)
            preds = torch.sigmoid(outputs)
            binary_preds = (preds > threshold).int().cpu().numpy()
            all_predictions.append(binary_preds)

    return np.vstack(all_predictions)

# 生成预测结果
dev_predictions = predict(dev_loader, model)
test_predictions = predict(test_loader, model)

# 预测数据保存
dev_results_df = dev_data[['text']].copy()
test_results_df = test_data[['text']].copy()

for i, emotion in enumerate(target_emotions):
    dev_results_df[f'{emotion}'] = dev_predictions[:, i]
    test_results_df[f'{emotion}'] = test_predictions[:, i]

# 保存 CSV
dev_results_df.to_csv("development_predictions.csv", index=False)
test_results_df.to_csv("test_predictions.csv", index=False)

print("\nPredictions saved: 'development_predictions.csv' and 'test_predictions.csv'")
 
